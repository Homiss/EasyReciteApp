package com.adm.dictionary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.adm.dictionary.bean.QuestionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_BEAN".
*/
public class QuestionBeanDao extends AbstractDao<QuestionBean, Long> {

    public static final String TABLENAME = "QUESTION_BEAN";

    /**
     * Properties of entity QuestionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Question = new Property(1, String.class, "question", false, "QUESTION");
        public final static Property QuestionId = new Property(2, Integer.class, "questionId", false, "QUESTION_ID");
        public final static Property Answer = new Property(3, String.class, "answer", false, "ANSWER");
        public final static Property Level = new Property(4, Integer.class, "level", false, "LEVEL");
        public final static Property Strange = new Property(5, Integer.class, "strange", false, "STRANGE");
        public final static Property GroupName = new Property(6, String.class, "groupName", false, "GROUP_NAME");
    }


    public QuestionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QUESTION\" TEXT," + // 1: question
                "\"QUESTION_ID\" INTEGER," + // 2: questionId
                "\"ANSWER\" TEXT," + // 3: answer
                "\"LEVEL\" INTEGER," + // 4: level
                "\"STRANGE\" INTEGER," + // 5: strange
                "\"GROUP_NAME\" TEXT);"); // 6: groupName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(2, question);
        }
 
        Integer questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(3, questionId);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(4, answer);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(5, level);
        }
 
        Integer strange = entity.getStrange();
        if (strange != null) {
            stmt.bindLong(6, strange);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(7, groupName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(2, question);
        }
 
        Integer questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(3, questionId);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(4, answer);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(5, level);
        }
 
        Integer strange = entity.getStrange();
        if (strange != null) {
            stmt.bindLong(6, strange);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(7, groupName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionBean readEntity(Cursor cursor, int offset) {
        QuestionBean entity = new QuestionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // question
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // questionId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answer
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // level
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // strange
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // groupName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuestionId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAnswer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLevel(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStrange(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setGroupName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
